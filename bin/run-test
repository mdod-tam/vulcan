#!/usr/bin/env bash
set -euo pipefail

# Run a specific system test with enhanced debugging

echo "=============================================="
echo "System Test Runner with Enhanced Debugging"
echo "=============================================="

# Check and clean up Chrome for Testing processes
echo "Checking for Chrome processes..."

# Debug helpers
count_processes() {
  local pattern="$1"
  local count=$(ps aux | grep -E "$pattern" | grep -v "grep" | wc -l | tr -d ' ')
  echo "$count"
}

# Use a more direct approach to avoid Ruby load path issues
if [[ "$OSTYPE" == "darwin"* ]]; then
  # Debug: Show running Chrome processes
  echo "-- Before cleanup --"
  
  # Only count the main Chrome process, not helpers
  MAIN_CHROME_PATTERN="Google Chrome$"
  TESTING_CHROME_PATTERN="Chrome for Testing$"
  CHROMEDRIVER_PATTERN="chromedriver"
  
  regular_chrome=$(count_processes "$MAIN_CHROME_PATTERN")
  testing_chrome=$(count_processes "$TESTING_CHROME_PATTERN")
  chromedriver=$(count_processes "$CHROMEDRIVER_PATTERN")
  
  echo "Regular Chrome processes: $regular_chrome"
  echo "Chrome for Testing processes: $testing_chrome"
  echo "ChromeDriver processes: $chromedriver"
  
  # Try graceful shutdown for testing Chrome
  if [ "$testing_chrome" -gt 0 ]; then
    echo "Sending SIGTERM to Chrome for Testing processes..."
    pkill -TERM -f 'Chrome for Testing' > /dev/null 2>&1 || true
    sleep 2
  fi
  
  if [ "$chromedriver" -gt 0 ]; then
    echo "Sending SIGTERM to ChromeDriver processes..."
    pkill -TERM -f 'chromedriver' > /dev/null 2>&1 || true
    sleep 1
  fi
  
  # Only force kill if still running
  testing_chrome_after=$(count_processes "$TESTING_CHROME_PATTERN")
  if [ "$testing_chrome_after" -gt 0 ]; then
    echo "Process still running after SIGTERM, using force kill for Chrome for Testing..."
    pkill -9 -f 'Chrome for Testing' > /dev/null 2>&1 || true
  fi
  
  chromedriver_after=$(count_processes "$CHROMEDRIVER_PATTERN")
  if [ "$chromedriver_after" -gt 0 ]; then
    echo "Process still running after SIGTERM, using force kill for ChromeDriver..."
    pkill -9 -f 'chromedriver' > /dev/null 2>&1 || true
  fi
  
  # Check if regular Chrome is preserved
  regular_chrome_after=$(count_processes "$MAIN_CHROME_PATTERN")
  echo "-- After cleanup --"
  echo "Regular Chrome processes: $regular_chrome_after"
  
  if [ "$regular_chrome" -gt 0 ] && [ "$regular_chrome_after" -gt 0 ]; then
    echo "âœ“ Regular Chrome browser preserved during test process cleanup"
  elif [ "$regular_chrome" -gt 0 ]; then
    echo "! Warning: Regular Chrome browser may have been affected"
  fi
elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
  # Linux - similar approach with more precise patterns
  echo "Linux environment detected - cleaning up only testing processes"
  pkill -TERM -f 'chrome.*for.*testing' > /dev/null 2>&1 || true
  pkill -TERM -f 'chromedriver' > /dev/null 2>&1 || true
  sleep 2
  pkill -9 -f 'chrome.*for.*testing' > /dev/null 2>&1 || true
  pkill -9 -f 'chromedriver' > /dev/null 2>&1 || true
fi

# Clean up temp directories
echo "Cleaning up temporary directories..."
rm -rf tmp/chrome_testing_profile tmp/capybara
mkdir -p tmp/chrome_testing_profile tmp/capybara

# Set up special environment variables for debugging
export DEBUG_AUTH=true
export WEBDRIVER_TIMEOUT=15
export CAPYBARA_SCREENSHOTS=true

# Clear logs
echo "Cleaning old logs..."
rm -f tmp/chromedriver.log log/test.log

# Setup Chrome for Testing
echo "Setting up Chrome for Testing..."
bash bin/setup-test-browser

# Get the browser path for reference
CHROME_BINARY=$(npx @puppeteer/browsers list chrome | grep "chrome@stable" | head -n 1)
echo "Chrome binary path: $CHROME_BINARY"

# Run the specific test with extra debugging output
echo "Running test with debugging enabled..."
echo "Command: bin/rails test $@"
RAILS_ENV=test bin/rails test "$@" -v

# Print the logs for reference
echo "=============================================="
echo "Recent test logs:"
tail -n 100 log/test.log 2>/dev/null || echo "No test log found"

echo "=============================================="
echo "Recent ChromeDriver logs:"
cat tmp/chromedriver.log 2>/dev/null || echo "No ChromeDriver log found"

echo "=============================================="
echo "Test run complete"
echo "Screenshots saved to: tmp/capybara/"
