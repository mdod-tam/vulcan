<div class="container voucher-redemption">
  <h1>Voucher Redemption</h1>

  <div class="card mb-4">
    <div class="card-header">
      <h2>Voucher Details</h2>
    </div>
    <div class="card-body">
      <div class="row">
        <div class="col-md-6">
          <p><strong>Voucher Code:</strong> <%= @voucher.code %></p>
          <p><strong>Constituent:</strong> <%= @voucher.application.constituent_full_name %></p>
          <p><strong>Issue Date:</strong> <%= @voucher.issued_at.strftime("%B %d, %Y") %></p>
        </div>
        <div class="col-md-6">
          <p><strong>Original Amount:</strong> <%= number_to_currency(@voucher.initial_value) %></p>
          <p><strong>Current Balance:</strong> <span class="text-success font-weight-bold"><%= number_to_currency(@voucher.remaining_value) %></span></p>
        </div>
      </div>
    </div>
  </div>

  <%= form_with(url: process_redemption_vendor_voucher_path(@voucher), method: :post, id: "redemption-form") do |f| %>
    <div class="card mb-4">
      <div class="card-header">
        <h2>Redemption Details</h2>
      </div>
      <div class="card-body">
        <div class="form-group">
          <%= f.label :amount, "Redemption Amount" %>
          <div class="input-group">
            <div class="input-group-prepend">
              <span class="input-group-text">$</span>
            </div>
            <%= f.number_field :amount, class: "form-control", min: 0.01, max: @voucher.remaining_value, step: 0.01, required: true, id: "redemption-amount" %>
          </div>
          <small class="form-text text-muted">Enter the amount to be redeemed (cannot exceed current balance)</small>
        </div>
      </div>
    </div>

    <div class="card mb-4">
      <div class="card-header">
        <h2>Select Products</h2>
        <p class="text-muted mb-0">Choose which products the constituent is purchasing with this voucher</p>
      </div>
      <div class="card-body">
        <div class="product-selection">
          <% @products.each do |product| %>
            <div class="product-item mb-3 p-3 border rounded">
              <div class="form-check d-flex align-items-center">
                <%= f.check_box "product_ids[]", { class: "form-check-input product-checkbox", id: "product_#{product.id}" }, product.id, nil %>
                <div class="ms-3 w-100">
                  <label class="form-check-label w-100" for="product_<%= product.id %>">
                    <div class="d-flex justify-content-between align-items-center">
                      <strong><%= product.name %></strong>
                      <span class="badge bg-primary"><%= number_to_currency(product.price) %></span>
                    </div>
                    <p class="text-muted mb-0"><%= product.description %></p>
                  </label>
                </div>
              </div>
              <div class="product-quantity-field mt-2 ms-4" style="display: none;">
                <div class="input-group" style="max-width: 200px;">
                  <label class="input-group-text" for="quantity_<%= product.id %>">Qty</label>
                  <%= f.number_field "product_quantities[#{product.id}]", class: "form-control", id: "quantity_#{product.id}", min: 1, value: 1 %>
                </div>
              </div>
            </div>
          <% end %>
        </div>

        <div id="no-products-warning" class="alert alert-warning mt-3" style="display: none;">
          Please select at least one product for this voucher redemption.
        </div>

        <div class="total-section mt-4 p-3 border rounded bg-light">
          <h4>Order Summary</h4>
          <div class="d-flex justify-content-between">
            <span>Selected Products:</span>
            <span id="selected-products-count">0</span>
          </div>
          <div class="d-flex justify-content-between">
            <strong>Total Value:</strong>
            <strong id="total-value">$0.00</strong>
          </div>
        </div>
      </div>
    </div>

    <div class="form-group text-end">
      <%= f.submit "Process Redemption", class: "btn btn-primary btn-lg", id: "submit-redemption" %>
      <%= link_to "Cancel", vendor_vouchers_path, class: "btn btn-outline-secondary btn-lg ms-2" %>
    </div>
  <% end %>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const productCheckboxes = document.querySelectorAll('.product-checkbox');
    const quantityFields = document.querySelectorAll('.product-quantity-field');
    const redemptionAmount = document.getElementById('redemption-amount');
    const totalValue = document.getElementById('total-value');
    const selectedCount = document.getElementById('selected-products-count');
    const submitButton = document.getElementById('submit-redemption');
    const noProductsWarning = document.getElementById('no-products-warning');

    // Toggle quantity fields based on checkbox selection
    productCheckboxes.forEach(checkbox => {
      checkbox.addEventListener('change', function() {
        const quantityField = this.closest('.product-item').querySelector('.product-quantity-field');
        quantityField.style.display = this.checked ? 'block' : 'none';

        calculateTotal();
      });
    });

    // Calculate totals whenever quantities change
    const quantityInputs = document.querySelectorAll('[id^="quantity_"]');
    quantityInputs.forEach(input => {
      input.addEventListener('change', calculateTotal);
    });

    // Calculate total on redemption amount change
    redemptionAmount.addEventListener('change', calculateTotal);

    function calculateTotal() {
      let total = 0;
      let count = 0;

      productCheckboxes.forEach(checkbox => {
        if (checkbox.checked) {
          count++;
          const productId = checkbox.value;
          const productPrice = parseFloat(checkbox.closest('.product-item').querySelector('.badge').innerText.replace(/[^0-9.]/g, ''));
          const quantity = parseInt(document.getElementById(`quantity_${productId}`).value) || 1;

          total += productPrice * quantity;
        }
      });

      totalValue.textContent = '$' + total.toFixed(2);
      selectedCount.textContent = count;

      // Show warning if no products selected
      if (count === 0) {
        noProductsWarning.style.display = 'block';
        submitButton.disabled = true;
      } else {
        noProductsWarning.style.display = 'none';
        submitButton.disabled = false;
      }

      // Validate redemption amount against total
      const amount = parseFloat(redemptionAmount.value) || 0;
      if (amount < total) {
        redemptionAmount.setCustomValidity(`Redemption amount must cover the total value of selected products ($${total.toFixed(2)})`);
      } else {
        redemptionAmount.setCustomValidity('');
      }
    }

    // Form validation
    document.getElementById('redemption-form').addEventListener('submit', function(e) {
      let hasSelectedProducts = false;

      productCheckboxes.forEach(checkbox => {
        if (checkbox.checked) {
          hasSelectedProducts = true;
        }
      });

      if (!hasSelectedProducts) {
        e.preventDefault();
        noProductsWarning.style.display = 'block';
        window.scrollTo(0, noProductsWarning.offsetTop - 100);
      }
    });

    // Initial calculation
    calculateTotal();
  });
</script>
