<%
  # Use application instance variable to avoid repeating queries
  request_count = @application.medical_certification_request_count || 0
  
  # Only load events if we haven't already done so in the controller
  # This ensures we don't duplicate expensive queries
  if !defined?(@certification_events) || @certification_events.nil?
    # Get certification events from multiple sources
    notifications = Notification.includes(:actor)
                      .where(notifiable: @application)
                      # Include all certification-related actions
                      .where("action LIKE ?", "%certification%")
                      .select(:id, :actor_id, :action, :created_at, :metadata, :notifiable_id)
    
    # Get status changes related to medical certification
    status_changes = ApplicationStatusChange.where(application_id: @application.id)
                      .where("metadata->>'change_type' = ? OR from_status LIKE ? OR to_status LIKE ?", 
                            'medical_certification', '%certification%', '%certification%')
                      .includes(:user)
                      .select(:id, :user_id, :from_status, :to_status, :created_at, :metadata)
    
    # Get events related to medical certification - broader match
    events = Event.where("(metadata->>'application_id' = ? AND (action LIKE ? OR metadata::text LIKE ?))", 
                        @application.id.to_s, 
                        "%certification%",
                        "%certification%")
                  .includes(:user)
                  .select(:id, :user_id, :action, :created_at, :metadata)
    
    # Rails.logger.debug("CERTIFICATION HISTORY: #{notifications.length} notifications, #{status_changes.length} status changes, #{events.length} events")
    
    # Combine all events and sort by creation date
    raw_events = (notifications.to_a + status_changes.to_a + events.to_a)
                  .sort_by(&:created_at)
                  .reverse
                  .first(20) # Increase limit to ensure we catch all duplicates
    
    # Deduplicate events based on timestamp and action type
    # Create a hash for event deduplication with composite keys
    events_by_key = {}
    
    raw_events.each do |event|
      # Extract timestamp
      timestamp = event.created_at
      if event.respond_to?(:metadata) && event.metadata.is_a?(Hash) && event.metadata['timestamp'].present?
        begin
          timestamp = Time.parse(event.metadata['timestamp'])
        rescue
          # Keep the original timestamp if parsing fails
        end
      end
      
      # Determine event type
      if event.is_a?(Notification)
        event_type = event.action
        actor_name = event.actor&.full_name || "System"
        provider_name = event.metadata.is_a?(Hash) ? event.metadata['provider_name'] : nil
      elsif event.is_a?(ApplicationStatusChange)
        event_type = event.to_status
        actor_name = event.user&.full_name || "System"
        provider_name = event.metadata.is_a?(Hash) ? event.metadata['provider_name'] : nil
      elsif event.is_a?(Event)
        event_type = event.action
        actor_name = event.user&.full_name || "System"
        provider_name = event.metadata.is_a?(Hash) ? (event.metadata["provider_name"] || event.metadata["doctor_name"]) : nil
      end
      
      # Create a unique key for this event type based on time and provider
      # Round timestamp to the minute to handle slight time differences
      timestamp_key = timestamp.strftime("%Y-%m-%d %H:%M")
      uniq_key = "#{timestamp_key}||#{event_type}||#{provider_name}"
      
      # Prioritize events with more information
      if !events_by_key.key?(uniq_key) || 
         (event.respond_to?(:metadata) && event.metadata.present? && events_by_key[uniq_key].respond_to?(:metadata) && !events_by_key[uniq_key].metadata.present?) ||
         (provider_name.present? && !events_by_key[uniq_key].respond_to?(:metadata))
        events_by_key[uniq_key] = event
      end
    end
    
    # Convert back to array and sort
    @certification_events = events_by_key.values.sort_by(&:created_at).reverse
  end
  
  # Determine which events are requests (for numbering)
  is_request_event = {}
  @certification_events.each do |event|
    is_request = (event.is_a?(Notification) && event.action == "medical_certification_requested") ||
                 (event.is_a?(ApplicationStatusChange) && event.to_status == "requested") ||
                 (event.is_a?(Event) && (event.action == "medical_certification_requested" || 
                                       (event.metadata.is_a?(Hash) && 
                                        event.metadata['details'].to_s.include?('certification requested')))) ||
                 (event.respond_to?(:metadata) && 
                  event.metadata.is_a?(Hash) && 
                  event.metadata.to_s.include?('certification requested'))
                  
    is_request_event[event.id] = is_request
  end
  
  # Count the actual number of request events after deduplication
  request_events = @certification_events.select { |event| is_request_event[event.id] }
  
  # Set the total count to at least match the existing count from application
  total_requests = [request_events.size, request_count].max
  
  # Pre-calculate the request numbers with proper sequential numbering
  request_indexes = {}
  current_index = 0
  
  # Assign sequential numbers to request events
  @certification_events.each do |event|
    if is_request_event[event.id]
      # Make sure we never have a request number less than 1
      request_indexes[event.id] = [total_requests - current_index, 1].max
      current_index += 1
    end
  end
%>

<div class="certification-history mt-2 pl-4 border-l-2 border-gray-200">
  <% if @certification_events.any? %>
    <%
      # Create a hash to collect unique request events by timestamp
      unique_requests = {}
      
      # Group request events by timestamp key first
      @certification_events.each do |event|
        next unless is_request_event[event.id]
        
        timestamp = event.created_at
        if event.respond_to?(:metadata) && event.metadata.is_a?(Hash) && event.metadata['timestamp'].present?
          begin
            timestamp = Time.parse(event.metadata['timestamp'])
          rescue
            # Keep the original timestamp if parsing fails
          end
        end
        
        timestamp_key = timestamp.strftime("%Y-%m-%d %H:%M")
        
        # Determine actor name
        if event.is_a?(Notification)
          actor_name = event.actor&.full_name || "System"
        elsif event.is_a?(ApplicationStatusChange)
          actor_name = event.user&.full_name || "System"
        elsif event.is_a?(Event)
          actor_name = event.user&.full_name || "System"
        end
        
        # Determine submission method if available
        submission_method = nil
        if event.respond_to?(:metadata) && event.metadata.is_a?(Hash)
          submission_method = event.metadata['submission_method'] || 
                             event.metadata['method'] || 
                             event.metadata['delivery_method']
        end
        
        # Store only one request per timestamp
        if !unique_requests.key?(timestamp_key) || 
           (submission_method.present? && !unique_requests[timestamp_key][:submission_method].present?)
          unique_requests[timestamp_key] = {
            timestamp: timestamp,
            actor_name: actor_name,
            submission_method: submission_method
          }
        end
      end
      
      # Sort the unique requests by timestamp (most recent first)
      sorted_unique_requests = unique_requests.values.sort_by { |r| r[:timestamp] }.reverse
    %>
    
    <% sorted_unique_requests.each do |request| %>
      <div class="request-item mb-2">
        <p class="text-sm text-gray-600 mb-1">
          â†’ Requested on <%= request[:timestamp].strftime("%B %d, %Y at %I:%M %p") %>
          <% if request[:actor_name].present? %>by <%= request[:actor_name] %><% end %>
          <% if request[:submission_method].present? %>(via <%= request[:submission_method] %>)<% end %>
        </p>
      </div>
    <% end %>
  <% else %>
    <div class="request-item mb-2">
      <p class="text-sm text-gray-600 mb-1">
        <span class="text-yellow-500">Note:</span> No detailed request history available.
        <% if @application.medical_certification_requested_at.present? %>
          Last request sent on <%= @application.medical_certification_requested_at.strftime("%B %d, %Y at %I:%M %p") %>
        <% end %>
      </p>
    </div>
  <% end %>
</div>
