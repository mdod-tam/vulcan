<section id="audit-logs" class="bg-white rounded-lg shadow p-6 mb-6" aria-labelledby="audit-logs-title">
    <h2 id="audit-logs-title" class="text-xl font-semibold text-gray-900 mb-4">Activity History</h2>
    <% if @application&.submission_method_paper? %>
      <div class="mb-4 p-3 bg-blue-50 rounded-md border border-blue-200">
        <div class="flex items-start">
          <div class="flex-shrink-0">
            <svg class="h-5 w-5 text-blue-600" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
            </svg>
          </div>
          <div class="ml-3">
            <p class="text-sm text-blue-800">
              <strong>Paper application</strong> - submission details are shown in the Activity History below.
            </p>
          </div>
        </div>
      </div>
    <% end %>
  <div class="overflow-x-auto">
    <table class="min-w-full divide-y divide-gray-200" role="table">
      <thead class="bg-gray-50">
        <tr>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
            Date
          </th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
            Activity Type
          </th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
            User
          </th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
            Details
          </th>
        </tr>
      </thead>
      <tbody class="bg-white divide-y divide-gray-200">
        <%
        # Filter out notification records that directly correspond to a proof review
        # This prevents showing both the admin action and the notification as separate entries
        # Make sure @audit_logs is not nil before filtering
        filtered_logs = if @audit_logs.present?
          @audit_logs.reject do |log|
            # Skip notification records if there's a matching proof review
            log.is_a?(Notification) && 
            log.action.in?(["proof_approved", "proof_rejected"]) && 
            @audit_logs.any? do |pr_log|
              pr_log.is_a?(ProofReview) && 
              (log.created_at.to_i - pr_log.created_at.to_i).abs < 30 && # Within 30 seconds (either before or after)
              ((pr_log.status == "approved" && log.action == "proof_approved") ||
               (pr_log.status == "rejected" && log.action == "proof_rejected")) &&
              pr_log.proof_type == log.metadata.try(:[], 'proof_type')
            end
          end
        else
          []
        end
        
        if filtered_logs.present?
          filtered_logs.each do |log| 
        %>
          <tr class="hover:bg-gray-50">
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
              <%= log.created_at.strftime("%B %d, %Y %I:%M %p") %>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="text-sm font-medium text-gray-900">
                <%= case 
                    when log.is_a?(ProofReview)
                      "Admin Review"
                    when log.is_a?(ApplicationStatusChange)
                      "Status Change"
                    when log.is_a?(Notification) || log.class.name == "NotificationDecorator"
                      case log.action
                      when "proof_approved", "proof_rejected"
                        "Notification Sent"
                      else
                        log.action.titleize.gsub('_', ' ')
                      end
                    when log.is_a?(Event)
                      case log.action
                      when "application_created"
                        submission_method = log.metadata['submission_method']&.titleize || "Unknown"
                        "Application Created (#{submission_method})"
                      when "voucher_assigned"
                        "Voucher Assigned"
                      when "voucher_redeemed"
                        "Voucher Redeemed"
                      when "voucher_expired"
                        "Voucher Expired"
                      when "voucher_cancelled"
                        "Voucher Cancelled"
                      else
                        log.action.titleize.gsub('_', ' ')
                      end
                    end %>
              </div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="text-sm text-gray-900">
                <%= case 
                    when log.is_a?(ProofReview)
                      log.admin.full_name
                    when log.is_a?(ApplicationStatusChange)
                      log.user&.full_name || "System"
                    when log.is_a?(Notification) || log.class.name == "NotificationDecorator"
                      log.actor&.full_name || "System"
                    when log.is_a?(Event)
                      log.user&.full_name || "System"
                    end %>
              </div>
            </td>
            <td class="px-6 py-4 text-sm text-gray-500">
              <%= case
                  when log.is_a?(ProofReview)
                    status_text = log.status_rejected? ? "rejected" : "approved"
                    rejection_text = log.rejection_reason.present? ? " - #{log.rejection_reason}" : ""
                    "Admin #{status_text} #{log.proof_type.titleize} proof#{rejection_text}"
                  when log.is_a?(ApplicationStatusChange)
                    if log.metadata.try(:[], 'change_type') == 'medical_certification'
                      # Special handling for medical certification status changes
                      method = log.metadata.try(:[], 'submission_method')&.titleize || "Unknown"
                      provider = log.metadata.try(:[], 'provider_name')
                      
                      status_text = case [log.from_status, log.to_status]
                      when [nil, "requested"], ["not_requested", "requested"]
                        provider_text = provider.present? ? " from #{provider}" : ""
                        "Medical certification requested#{provider_text}"
                      when [_, "received"]
                        received_at = log.metadata['received_at'].present? ? Time.parse(log.metadata['received_at']).strftime("%m/%d/%Y at %I:%M %p") : nil
                        timestamp_text = received_at.present? ? " on #{received_at}" : ""
                        "Medical certification received (via #{method})#{timestamp_text}"
                      when [_, "accepted"]
                        received_at = log.metadata['received_at'].present? ? Time.parse(log.metadata['received_at']).strftime("%m/%d/%Y at %I:%M %p") : nil
                        processed_at = log.metadata['processed_at'].present? ? Time.parse(log.metadata['processed_at']).strftime("%m/%d/%Y at %I:%M %p") : nil
                        
                        # If both timestamps exist and are different, show both
                        if received_at.present? && processed_at.present? && received_at != processed_at
                          "Medical certification received on #{received_at} and approved on #{processed_at} (via #{method})"
                        # If only processed_at exists or they're the same, just show one timestamp
                        elsif processed_at.present?
                          "Medical certification approved on #{processed_at} (via #{method})"
                        else
                          "Medical certification approved (via #{method})"
                        end
                      when [_, "rejected"]
                        "Medical certification rejected (via #{method})#{log.metadata.try(:[], 'rejection_reason').present? ? " - #{log.metadata['rejection_reason']}" : ""}"
                      else
                        "Medical certification status changed from #{log.from_status&.titleize || 'Not Requested'} to #{log.to_status&.titleize}"
                      end
                      "#{status_text}#{log.notes.present? ? " - #{log.notes}" : ""}"
                    else
                      # Regular application status changes
                      status_text = case [log.from_status, log.to_status]
                      when [nil, "draft"]
                        "Application created as draft"
                      when ["draft", "in_progress"]
                        "Application submitted for review"
                      when [_, "approved"]
                        "Application approved" 
                      when [_, "rejected"]
                        "Application rejected"
                      else
                        "Status changed from #{log.from_status&.titleize || 'Not Set'} to #{log.to_status&.titleize}"
                      end
                      "#{status_text}#{log.notes.present? ? " - #{log.notes}" : ""}"
                    end
                  when log.is_a?(Notification) || log.class.name == "NotificationDecorator"
                    case log.action
                    when "medical_certification_requested"
                      "Medical certification requested from #{@application.medical_provider_name}"
                    when "medical_certification_received"
                      "Medical certification received from provider"
                    when "medical_certification_approved"
                      "Medical certification approved"
                    when "medical_certification_rejected"
                      "Medical certification rejected#{log.metadata['reason'].present? ? " - #{log.metadata['reason']}" : ''}"
                    when "review_requested"
                      "Review requested by constituent"
                    when "documents_requested"
                      "Additional documents requested"
                    when "proof_approved"
                      proof_type = log.metadata.try(:[], 'proof_type') || 'Unknown'
                      "Constituent notified: #{proof_type.titleize} proof approved"
                    when "proof_rejected"
                      proof_type = log.metadata.try(:[], 'proof_type') || 'Unknown'
                      rejection_text = log.metadata.try(:[], 'rejection_reason').present? ? " - #{log.metadata['rejection_reason']}" : ""
                      "Constituent notified: #{proof_type.titleize} proof rejected#{rejection_text}"
                    else
                      log.action.titleize.gsub('_', ' ')
                    end
                  when log.is_a?(Event)
                    case log.action
                    when "application_created"
                      method = log.metadata['submission_method']&.titleize || "Unknown"
                      initial_status = log.metadata['initial_status']&.titleize || "Unknown"
                      "Application created via #{method} method with status: #{initial_status}"
                    when "evaluator_assigned"
                      "Evaluator #{log.metadata['evaluator_name']} assigned to application"
                    when "trainer_assigned"
                      "Trainer #{log.metadata['trainer_name']} assigned to application"
                    when "application_auto_approved"
                      trigger = log.metadata['trigger'].to_s.gsub('proof_', '').titleize
                      "Application automatically approved after all proofs validated (triggered by: #{trigger})"
                    when "voucher_assigned"
                      "Voucher #{log.metadata['voucher_code']} assigned with value #{number_to_currency(log.metadata['initial_value'])}"
                    when "voucher_redeemed"
                      "Voucher #{log.metadata['voucher_code']} redeemed for #{number_to_currency(log.metadata['amount'])} at #{log.metadata['vendor_name']}"
                    when "voucher_expired"
                      "Voucher #{log.metadata['voucher_code']} expired with unused value #{number_to_currency(log.metadata['unused_value'])}"
                    when "voucher_cancelled"
                      "Voucher #{log.metadata['voucher_code']} cancelled"
                    else
                      log.action.titleize.gsub('_', ' ')
                    end
                  end %>
            </td>
          </tr>
        <% end 
        end %>
        <% if filtered_logs.blank? %>
          <tr>
            <td colspan="4" class="px-6 py-4 text-center text-gray-500">
              No activity has been recorded yet.
            </td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </div>
</section>
